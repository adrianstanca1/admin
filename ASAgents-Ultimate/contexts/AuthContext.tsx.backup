<<<<<<< HEAD
import React, { createContext, useState, useContext, useEffect, useCallback, ReactNode, useMemo } from 'react';
import { User, Company, LoginCredentials, RegistrationPayload, AuthState, Permission } from '../types';
import { authClient, type AuthenticatedSession } from '../services/authClient';
import { hasPermission as checkPermission } from '../services/auth';
import { getStorage } from '../utils/storage';

<<<<<<< HEAD
import React, { createContext, useState, useContext, useEffect, useCallback, ReactNode } from 'react';
import { User, Company, LoginCredentials, RegisterCredentials, AuthState, Permission, SocialProvider, SocialAuthRequest, CompanyAccessSummary, SwitchCompanyResponse, TenantDirectoryContext } from '../types';
import { authApi } from '../services/mockApi';
import { hasPermission as checkPermission } from '../services/auth';
import { getStorage } from '../utils/storage';

const storage = getStorage();

interface AuthContextType extends AuthState {
    login: (credentials: LoginCredentials) => Promise<{ mfaRequired: boolean; userId?: string }>;
    register: (credentials: Partial<RegisterCredentials>) => Promise<void>;
    socialLogin: (provider: SocialProvider, profile: SocialAuthRequest) => Promise<void>;
    logout: () => void;
    hasPermission: (permission: Permission) => boolean;
    verifyMfaAndFinalize: (userId: string, code: string) => Promise<void>;
    updateUserProfile: (updates: Partial<User>) => Promise<void>;
    requestPasswordReset: (email: string) => Promise<void>;
    resetPassword: (token: string, newPassword: string) => Promise<void>;
    refreshTenants: () => Promise<void>;
    switchCompany: (companyId: string) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

interface AuthProviderProps {
    children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
    const [authState, setAuthState] = useState<AuthState>({
        isAuthenticated: false,
        token: null,
        refreshToken: null,
        user: null,
        company: null,
        availableCompanies: [],
        activeCompanyId: null,
        loading: true,
        error: null,
    });

    let tokenRefreshTimeout: NodeJS.Timeout | null = null;

    const logout = useCallback(() => {
        storage.removeItem('token');
        storage.removeItem('refreshToken');
        if (tokenRefreshTimeout) clearTimeout(tokenRefreshTimeout);
        setAuthState({
            isAuthenticated: false,
            token: null,
            refreshToken: null,
            user: null,
            company: null,
            availableCompanies: [],
            activeCompanyId: null,
            loading: false,
            error: null,
        });
    }, []);

    const scheduleTokenRefresh = useCallback((token: string) => {
        if (tokenRefreshTimeout) clearTimeout(tokenRefreshTimeout);

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const expirationTime = payload.exp * 1000;
            const currentTime = Date.now();
            const timeUntilExpiry = expirationTime - currentTime;
            const refreshTime = Math.max(timeUntilExpiry - 60000, 0);

            if (refreshTime > 0) {
                tokenRefreshTimeout = setTimeout(async () => {
                    const storedRefreshToken = storage.getItem('refreshToken');
                    if (storedRefreshToken) {
                        try {
                            const response = await authApi.refreshToken(storedRefreshToken);
                            storage.setItem('token', response.token);
                            if (response.refreshToken) {
                                storage.setItem('refreshToken', response.refreshToken);
                            }
                            setAuthState(prev => ({
                                ...prev,
                                token: response.token,
                                refreshToken: response.refreshToken || prev.refreshToken,
                            }));
                            scheduleTokenRefresh(response.token);
                        } catch (error) {
                            console.error('Token refresh failed:', error);
                            logout();
                        }
                    }
                }, refreshTime);
            }
        } catch (error) {
            console.error('Error parsing token for refresh scheduling:', error);
        }
    }, [logout]);

    const login = useCallback(async (credentials: LoginCredentials): Promise<{ mfaRequired: boolean; userId?: string }> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            const response = await authApi.login(credentials);
            
            if (response.mfaRequired) {
                setAuthState(prev => ({ ...prev, loading: false }));
                return { mfaRequired: true, userId: response.userId };
            }

            const { token, refreshToken, user, company, availableCompanies, activeCompanyId } = response;

            storage.setItem('token', token);
            if (refreshToken) {
                storage.setItem('refreshToken', refreshToken);
            }

            setAuthState({
                isAuthenticated: true,
                token,
                refreshToken,
                user,
                company,
                availableCompanies: availableCompanies || [],
                activeCompanyId,
                loading: false,
                error: null,
            });

            scheduleTokenRefresh(token);
            return { mfaRequired: false };
        } catch (error: any) {
            setAuthState(prev => ({ 
                ...prev, 
                loading: false, 
                error: error?.message || 'Login failed' 
            }));
            throw error;
        }
    }, [scheduleTokenRefresh]);

    const register = useCallback(async (credentials: Partial<RegisterCredentials>): Promise<void> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            await authApi.register(credentials);
            setAuthState(prev => ({ ...prev, loading: false }));
        } catch (error: any) {
            setAuthState(prev => ({ 
                ...prev, 
                loading: false, 
                error: error?.message || 'Registration failed' 
            }));
            throw error;
        }
    }, []);

    const socialLogin = useCallback(async (provider: SocialProvider, profile: SocialAuthRequest): Promise<void> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            const response = await authApi.socialLogin(provider, profile);
            const { token, refreshToken, user, company, availableCompanies, activeCompanyId } = response;

            storage.setItem('token', token);
            if (refreshToken) {
                storage.setItem('refreshToken', refreshToken);
            }

            setAuthState({
                isAuthenticated: true,
                token,
                refreshToken,
                user,
                company,
                availableCompanies: availableCompanies || [],
                activeCompanyId,
                loading: false,
                error: null,
            });

            scheduleTokenRefresh(token);
        } catch (error: any) {
            setAuthState(prev => ({ 
                ...prev, 
                loading: false, 
                error: error?.message || 'Social login failed' 
            }));
            throw error;
        }
    }, [scheduleTokenRefresh]);

    const verifyMfaAndFinalize = useCallback(async (userId: string, code: string): Promise<void> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            const response = await authApi.verifyMfaAndFinalize(userId, code);
            const { token, refreshToken, user, company, availableCompanies, activeCompanyId } = response;

            storage.setItem('token', token);
            if (refreshToken) {
                storage.setItem('refreshToken', refreshToken);
            }

            setAuthState({
                isAuthenticated: true,
                token,
                refreshToken,
                user,
                company,
                availableCompanies: availableCompanies || [],
                activeCompanyId,
                loading: false,
                error: null,
            });

            scheduleTokenRefresh(token);
        } catch (error: any) {
            setAuthState(prev => ({ 
                ...prev, 
                loading: false, 
                error: error?.message || 'MFA verification failed' 
            }));
            throw error;
        }
    }, [scheduleTokenRefresh]);

    const updateUserProfile = useCallback(async (updates: Partial<User>): Promise<void> => {
        if (!authState.user) return;
        try {
            const updatedUser = await authApi.updateUserProfile(authState.user.id, updates);
            setAuthState(prev => ({ ...prev, user: updatedUser }));
        } catch (error: any) {
            setAuthState(prev => ({ 
                ...prev, 
                error: error?.message || 'Profile update failed' 
            }));
            throw error;
        }
    }, [authState.user]);

    const requestPasswordReset = useCallback(async (email: string): Promise<void> => {
        try {
            await authApi.requestPasswordReset(email);
        } catch (error: any) {
            throw error;
        }
    }, []);

    const resetPassword = useCallback(async (token: string, newPassword: string): Promise<void> => {
        try {
            await authApi.resetPassword(token, newPassword);
        } catch (error: any) {
            throw error;
        }
    }, []);

    const hasPermission = useCallback((permission: Permission): boolean => {
        return checkPermission(authState.user, permission);
    }, [authState.user]);

    const refreshTenants = useCallback(async () => {
        try {
            const tenants: TenantDirectoryContext = await authApi.listTenants();
            setAuthState(prev => ({
                ...prev,
                availableCompanies: tenants.companies,
                activeCompanyId: tenants.activeCompanyId,
            }));
        } catch (error) {
            console.error('Failed to refresh tenant directory', error);
        }
    }, []);

    const switchCompany = useCallback(async (companyId: string) => {
        setAuthState(prev => ({ ...prev, error: null }));
        try {
            const response: SwitchCompanyResponse = await authApi.switchCompany(companyId);
            const normalizedUser: User = {
                ...response.user,
                companyId: response.activeCompanyId,
                primaryCompanyId: response.user.primaryCompanyId ?? response.user.companyId,
            };
            setAuthState(prev => ({
                ...prev,
                user: normalizedUser,
                company: response.company,
                availableCompanies: response.availableCompanies,
                activeCompanyId: response.activeCompanyId,
            }));
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, error: error?.message || 'Unable to switch company' }));
            throw error;
        }
    }, []);

    // Initialize auth state on mount
    useEffect(() => {
        const initializeAuth = async () => {
            const token = storage.getItem('token');
            const refreshToken = storage.getItem('refreshToken');

            if (token && refreshToken) {
                try {
                    const user = await authApi.getCurrentUser();
                    const tenants = await authApi.listTenants();
                    
                    setAuthState({
                        isAuthenticated: true,
                        token,
                        refreshToken,
                        user,
                        company: tenants.activeCompany,
                        availableCompanies: tenants.companies,
                        activeCompanyId: tenants.activeCompanyId,
                        loading: false,
                        error: null,
                    });

                    scheduleTokenRefresh(token);
                } catch (error) {
                    console.error('Auth initialization failed:', error);
                    logout();
                }
            } else {
                setAuthState(prev => ({ ...prev, loading: false }));
            }
        };

        initializeAuth();
    }, [logout, scheduleTokenRefresh]);

    const value: AuthContextType = {
        ...authState,
        login,
        register,
        socialLogin,
        logout,
        hasPermission,
        verifyMfaAndFinalize,
        updateUserProfile,
        requestPasswordReset,
        resetPassword,
        refreshTenants,
        switchCompany,
    };

    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
=======
type Persistence = 'local' | 'session';

const TOKEN_KEY = 'token';
const REFRESH_TOKEN_KEY = 'refreshToken';
const PERSISTENCE_KEY = 'asagents_auth_persistence';

const isBrowser = () => typeof window !== 'undefined';

const getStorage = (persistence: Persistence): Storage | null => {
    if (!isBrowser()) return null;
    return persistence === 'local' ? window.localStorage : window.sessionStorage;
};

const clearStoredTokens = () => {
    if (!isBrowser()) return;
    [window.localStorage, window.sessionStorage].forEach(storage => {
        storage.removeItem(TOKEN_KEY);
        storage.removeItem(REFRESH_TOKEN_KEY);
        storage.removeItem(PERSISTENCE_KEY);
    });
};

const storeTokens = (token: string, refreshToken: string | null, persistence: Persistence) => {
    const targetStorage = getStorage(persistence);
    if (!targetStorage) return;

    targetStorage.setItem(TOKEN_KEY, token);
    if (refreshToken) {
        targetStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);
    }
    targetStorage.setItem(PERSISTENCE_KEY, persistence);

    const otherStorage = getStorage(persistence === 'local' ? 'session' : 'local');
    otherStorage?.removeItem(TOKEN_KEY);
    otherStorage?.removeItem(REFRESH_TOKEN_KEY);
    otherStorage?.removeItem(PERSISTENCE_KEY);
};

const readStoredTokens = (): { token: string | null; refreshToken: string | null; persistence: Persistence } => {
    if (!isBrowser()) {
        return { token: null, refreshToken: null, persistence: 'local' };
    }

    const storages: Array<{ storage: Storage; persistence: Persistence }> = [
        { storage: window.localStorage, persistence: 'local' },
        { storage: window.sessionStorage, persistence: 'session' },
    ];

    for (const { storage, persistence } of storages) {
        const token = storage.getItem(TOKEN_KEY);
        const refreshToken = storage.getItem(REFRESH_TOKEN_KEY);
        if (token && refreshToken) {
            storage.setItem(PERSISTENCE_KEY, persistence);
            return { token, refreshToken, persistence };
        }
    }

    const preference =
        (window.localStorage.getItem(PERSISTENCE_KEY) as Persistence | null) ??
        (window.sessionStorage.getItem(PERSISTENCE_KEY) as Persistence | null) ??
        'local';

    return { token: null, refreshToken: null, persistence: preference };
};
=======
import React, { createContext, useState, useContext, useEffect, useCallback, ReactNode } from 'react';
<<<<<<< HEAD
import { User, Company, LoginCredentials, RegistrationPayload, AuthState, Permission } from '../types';
import { authClient, type AuthenticatedSession } from '../services/authClient';
=======
import { User, Company, LoginCredentials, RegisterCredentials, AuthState, Permission, SocialProvider, SocialAuthRequest, AuthSuccessPayload, CompanyAccessSummary, SwitchCompanyResponse, TenantDirectoryContext } from '../types';
import { authApi } from '../services/mockApi';
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)
import { hasPermission as checkPermission } from '../services/auth';
import { api } from '../services/mockApi';
import { getStorage } from '../utils/storage';

const storage = getStorage();
>>>>>>> efe636d (Log sixth autonomous deployment run)

interface AuthContextType extends AuthState {
>>>>>>> 23b87ff (Improve auth persistence handling)
    login: (credentials: LoginCredentials) => Promise<{ mfaRequired: boolean; userId?: string }>;
<<<<<<< HEAD
    register: (credentials: RegistrationPayload) => Promise<AuthenticatedSession>;
<<<<<<< HEAD
    socialLogin: (provider: string, profile?: any) => Promise<AuthenticatedSession>;
=======
>>>>>>> efe636d (Log sixth autonomous deployment run)
=======
    register: (credentials: Partial<RegisterCredentials>) => Promise<void>;
    socialLogin: (provider: SocialProvider, profile: SocialAuthRequest) => Promise<void>;
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)
    logout: () => void;
    hasPermission: (permission: Permission) => boolean;
    verifyMfaAndFinalize: (userId: string, code: string) => Promise<void>;
    updateUserProfile: (updates: Partial<User>) => Promise<void>;
    requestPasswordReset: (email: string) => Promise<void>;
    resetPassword: (token: string, newPassword: string) => Promise<void>;
<<<<<<< HEAD
    refreshToken: () => Promise<void>;
=======
    refreshTenants: () => Promise<void>;
    switchCompany: (companyId: string) => Promise<void>;
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

interface AuthProviderProps {
    children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
    const [authState, setAuthState] = useState<AuthState>({
        isAuthenticated: false,
        token: null,
        refreshToken: null,
        user: null,
        company: null,
        availableCompanies: [],
        activeCompanyId: null,
        loading: true,
        error: null,
    });
    const [pendingPersistence, setPendingPersistence] = useState<Persistence>('local');

    let tokenRefreshTimeout: NodeJS.Timeout | null = null;

    const logout = useCallback(() => {
<<<<<<< HEAD
<<<<<<< HEAD
        storage.removeItem('token');
        storage.removeItem('refreshToken');
=======
        clearStoredTokens();
>>>>>>> 23b87ff (Improve auth persistence handling)
=======
        storage.removeItem('token');
        storage.removeItem('refreshToken');
>>>>>>> efe636d (Log sixth autonomous deployment run)
        if (tokenRefreshTimeout) clearTimeout(tokenRefreshTimeout);
        setPendingPersistence('local');
        setAuthState({
            isAuthenticated: false,
            token: null,
            refreshToken: null,
            user: null,
            company: null,
            availableCompanies: [],
            activeCompanyId: null,
            loading: false,
            error: null,
        });
    }, []);

<<<<<<< HEAD
    const scheduleTokenRefresh = useCallback((token: string) => {
        if (tokenRefreshTimeout) clearTimeout(tokenRefreshTimeout);

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const expirationTime = payload.exp * 1000;
            const currentTime = Date.now();
            const timeUntilExpiry = expirationTime - currentTime;
            const refreshTime = Math.max(timeUntilExpiry - 60000, 0);

            if (refreshTime > 0) {
                tokenRefreshTimeout = setTimeout(async () => {
                    const storedRefreshToken = storage.getItem('refreshToken');
                    if (storedRefreshToken) {
                        try {
                            console.log("Proactively refreshing token...");
                            const { token: newToken } = await authClient.refreshToken(storedRefreshToken);
                            storage.setItem('token', newToken);
                            setAuthState(prev => ({ ...prev, token: newToken }));
                            scheduleTokenRefresh(newToken);
                        } catch (error) {
                            console.error('Proactive token refresh failed', error);
                            logout();
                        }
=======
    /**
     * Proactively schedules a token refresh before the current access token expires.
     * This improves UX by preventing the user from being logged out during an active session.
     */
    const scheduleTokenRefresh = useCallback((token: string, persistence: Persistence) => {
        if (tokenRefreshTimeout) {
            clearTimeout(tokenRefreshTimeout);
        }
        const decoded = parseJwt(token);
        if (decoded && decoded.exp) {
            // Refresh 1 minute before expiry to be safe
            const expiresIn = (decoded.exp * 1000) - Date.now() - 60000;
            if (expiresIn > 0) {
                tokenRefreshTimeout = setTimeout(async () => {
<<<<<<< HEAD
                    const storage = getStorage(persistence);
                    if (!storage) {
                        return;
=======
                    const storedRefreshToken = storage.getItem('refreshToken');
                    if (storedRefreshToken) {
                        try {
                            console.log("Proactively refreshing token...");
                            const { token: newToken } = await authClient.refreshToken(storedRefreshToken);
                            storage.setItem('token', newToken);
                            setAuthState(prev => ({ ...prev, token: newToken }));
                            scheduleTokenRefresh(newToken); // Schedule the next refresh
                        } catch (error) {
                            console.error("Proactive token refresh failed", error);
                            logout();
                        }
>>>>>>> efe636d (Log sixth autonomous deployment run)
                    }
                    const storedRefreshToken = storage.getItem(REFRESH_TOKEN_KEY);
                    if (!storedRefreshToken) {
                        logout();
                        return;
                    }
                    try {
                        console.log("Proactively refreshing token...");
                        const { token: newToken } = await authApi.refreshToken(storedRefreshToken);
                        storeTokens(newToken, storedRefreshToken, persistence);
                        setAuthState(prev => ({ ...prev, token: newToken }));
                        scheduleTokenRefresh(newToken, persistence); // Schedule the next refresh
                    } catch (error) {
                        console.error("Proactive token refresh failed", error);
                        logout();
>>>>>>> 23b87ff (Improve auth persistence handling)
                    }
                }, refreshTime);
            } else {
                console.warn('Token is already expired or has less than a minute left. Logging out.');
                logout();
            }
        } catch (error) {
            console.error('Error parsing token for refresh scheduling:', error);
        }
    }, [logout]);
<<<<<<< HEAD
<<<<<<< HEAD

    const finalizeLogin = useCallback((data: { token: string, refreshToken: string, user: User, company: Company }) => {
        storage.setItem('token', data.token);
        storage.setItem('refreshToken', data.refreshToken);
<<<<<<< HEAD
=======
    
    const finalizeLogin = useCallback((data: { token: string, refreshToken: string, user: User, company: Company }, persistence: Persistence) => {
        storeTokens(data.token, data.refreshToken, persistence);
>>>>>>> 23b87ff (Improve auth persistence handling)
=======
>>>>>>> efe636d (Log sixth autonomous deployment run)
=======
    
    const finalizeLogin = useCallback((data: AuthSuccessPayload) => {
        localStorage.setItem('token', data.token);
        localStorage.setItem('refreshToken', data.refreshToken);
        const activeCompanyId = data.activeCompanyId ?? data.company?.id ?? data.user?.companyId ?? null;
        const availableCompanies: CompanyAccessSummary[] = data.availableCompanies ?? (data.company ? [{
            id: data.company.id,
            name: data.company.name,
            status: String((data.company as any).status ?? 'ACTIVE'),
            subscriptionPlan: data.company.subscriptionPlan ?? 'PROFESSIONAL',
            membershipRole: data.user.role,
            membershipType: 'primary',
            isPlatform: false,
            isPrimary: true,
        }] : []);
        const normalizedUser: User = {
            ...data.user,
            companyId: activeCompanyId ?? data.user.companyId,
            primaryCompanyId: data.user.primaryCompanyId ?? data.user.companyId,
        };
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)
        setAuthState({
            isAuthenticated: true,
            token: data.token,
            refreshToken: data.refreshToken,
            user: normalizedUser,
            company: data.company,
            availableCompanies,
            activeCompanyId,
            loading: false,
            error: null,
        });
        setPendingPersistence(persistence);
        scheduleTokenRefresh(data.token, persistence);
    }, [scheduleTokenRefresh]);

    const initAuth = useCallback(async () => {
<<<<<<< HEAD
<<<<<<< HEAD
        const token = storage.getItem('token');
        const refreshToken = storage.getItem('refreshToken');
        if (token && refreshToken) {
            try {
                const { user, company } = await authClient.me(token);
                finalizeLogin({ token, refreshToken, user, company });
=======
        const { token, refreshToken, persistence } = readStoredTokens();
        if (token && refreshToken) {
            try {
                // First, try to authenticate with the existing access token.
<<<<<<< HEAD
                const { user, company } = await authApi.me(token);
                finalizeLogin({ token, refreshToken, user, company }, persistence);
>>>>>>> 23b87ff (Improve auth persistence handling)
=======
        const token = storage.getItem('token');
        const refreshToken = storage.getItem('refreshToken');
        if (token && refreshToken) {
            try {
                // First, try to authenticate with the existing access token.
                const { user, company } = await authClient.me(token);
                finalizeLogin({ token, refreshToken, user, company });
>>>>>>> efe636d (Log sixth autonomous deployment run)
=======
            const session = await authApi.me(token);
            finalizeLogin({
                token,
                refreshToken,
                user: session.user,
                company: session.company,
                availableCompanies: session.availableCompanies,
                activeCompanyId: session.activeCompanyId,
            });
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)
            } catch (error) {
                console.log('Access token invalid, attempting reactive refresh...');
                try {
<<<<<<< HEAD
<<<<<<< HEAD
                    const { token: newToken } = await authClient.refreshToken(refreshToken);
                    const { user, company } = await authClient.me(newToken);
                    finalizeLogin({ token: newToken, refreshToken, user, company });
=======
                    const { token: newToken } = await authApi.refreshToken(refreshToken);
<<<<<<< HEAD
                    const { user, company } = await authApi.me(newToken);
                    finalizeLogin({ token: newToken, refreshToken, user, company }, persistence);
>>>>>>> 23b87ff (Improve auth persistence handling)
=======
                    const { token: newToken } = await authClient.refreshToken(refreshToken);
                    const { user, company } = await authClient.me(newToken);
                    finalizeLogin({ token: newToken, refreshToken, user, company });
>>>>>>> efe636d (Log sixth autonomous deployment run)
=======
                    const session = await authApi.me(newToken);
                    finalizeLogin({
                        token: newToken,
                        refreshToken,
                        user: session.user,
                        company: session.company,
                        availableCompanies: session.availableCompanies,
                        activeCompanyId: session.activeCompanyId,
                    });
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)
                } catch (refreshError) {
                    console.error('Auth init with refresh token failed, logging out.', refreshError);
                    logout();
                }
            }
        } else {
            setAuthState(prev => ({ ...prev, loading: false }));
        }
    }, [finalizeLogin, logout]);

    useEffect(() => {
        initAuth();
    }, [initAuth]);

    const login = async (credentials: LoginCredentials): Promise<{ mfaRequired: boolean; userId?: string }> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        const desiredPersistence: Persistence = credentials.rememberMe === false ? 'session' : 'local';
        setPendingPersistence(desiredPersistence);
        try {
            const response = await authClient.login(credentials);
            if (response.mfaRequired) {
                setAuthState(prev => ({ ...prev, loading: false }));
                return { mfaRequired: true, userId: response.userId };
            }
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======

            finalizeLogin(response);
            return { mfaRequired: false };
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)

            finalizeLogin(response, desiredPersistence);
            return { mfaRequired: false };
>>>>>>> 23b87ff (Improve auth persistence handling)

            if ('token' in response && 'refreshToken' in response && 'user' in response && 'company' in response) {
                finalizeLogin(response);
            } else {
                throw new Error('Invalid login response format');
            }
            return { mfaRequired: false };
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error?.message || 'Login failed' }));
            throw error;
        }
    };

    const verifyMfaAndFinalize = async (userId: string, code: string) => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
<<<<<<< HEAD
        try {
            const response = await authClient.verifyMfa(userId, code);
            finalizeLogin(response);
=======
         try {
<<<<<<< HEAD
            const response = await authApi.verifyMfa(userId, code);
            finalizeLogin(response, pendingPersistence);
>>>>>>> 23b87ff (Improve auth persistence handling)
=======
            const response = await authClient.verifyMfa(userId, code);
            finalizeLogin(response);
>>>>>>> efe636d (Log sixth autonomous deployment run)
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error?.message || 'MFA verification failed' }));
            throw error;
        }
    };

    const register = async (credentials: RegistrationPayload): Promise<AuthenticatedSession> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
<<<<<<< HEAD
<<<<<<< HEAD
            const session = await authClient.register(credentials);
            finalizeLogin(session);
            return session;
=======
            const response = await authApi.register(credentials);
            finalizeLogin(response, 'local');
>>>>>>> 23b87ff (Improve auth persistence handling)
=======
            const session = await authClient.register(credentials);
            finalizeLogin(session);
            return session;
>>>>>>> efe636d (Log sixth autonomous deployment run)
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error?.message || 'Registration failed' }));
            throw error;
        }
    };

    const socialLogin = async (provider: string, profile: any = {}): Promise<AuthenticatedSession> => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            const session = await authClient.socialLogin(provider as any, profile);
            finalizeLogin(session);
            return session;
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error?.message || 'Social login failed' }));
            throw error;
        }
    };

    const updateUserProfile = async (updates: Partial<User>): Promise<void> => {
        if (!authState.user) throw new Error('No authenticated user');

        try {
            // For now, update locally until backend API is implemented
            const updatedUser = { ...authState.user, ...updates };
            setAuthState(prev => ({ ...prev, user: updatedUser }));
        } catch (error: any) {
            throw new Error(error?.message || 'Failed to update profile');
        }
    };

    const requestPasswordReset = async (email: string): Promise<void> => {
        try {
            await authClient.requestPasswordReset(email);
        } catch (error: any) {
            throw new Error(error?.message || 'Failed to request password reset');
        }
    };

    const resetPassword = async (token: string, newPassword: string): Promise<void> => {
        try {
            await authClient.resetPassword(token, newPassword);
        } catch (error: any) {
            throw new Error(error?.message || 'Failed to reset password');
        }
    };

    const refreshTokenManually = async (): Promise<void> => {
        const storedRefreshToken = storage.getItem('refreshToken');
        if (!storedRefreshToken) {
            logout();
            return;
        }

        try {
            const { token: newToken } = await authClient.refreshToken(storedRefreshToken);
            storage.setItem('token', newToken);
            setAuthState(prev => ({ ...prev, token: newToken }));
            scheduleTokenRefresh(newToken);
        } catch (error) {
            console.error('Manual token refresh failed', error);
            logout();
        }
    };

    const hasPermission = (permission: Permission): boolean => {
        return checkPermission(authState.user, permission);
    };

<<<<<<< HEAD
    const value: AuthContextType = useMemo(() => ({
        isAuthenticated: authState.isAuthenticated,
        token: authState.token,
        refreshTokenValue: authState.refreshToken,
        user: authState.user,
        company: authState.company,
        loading: authState.loading,
        error: authState.error,
=======
    const updateUserProfile = async (updates: Partial<User>) => {
        if (!authState.user) throw new Error("Not authenticated");
        // Pass undefined for projectIds to avoid triggering assignment updates
        const updatedUser = await api.updateUser(authState.user.id, updates, undefined, authState.user.id);
        setAuthState(prev => ({
            ...prev,
            user: { ...prev.user, ...updatedUser } as User,
        }));
    };

    const requestPasswordReset = async (email: string) => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            await authClient.requestPasswordReset(email);
            setAuthState(prev => ({ ...prev, loading: false }));
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error.message || 'Request failed'}));
            throw error;
        }
    };

    const resetPassword = async (token: string, newPassword: string) => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            await authClient.resetPassword(token, newPassword);
            setAuthState(prev => ({ ...prev, loading: false }));
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error.message || 'Password reset failed'}));
            throw error;
        }
    };
    
    const socialLogin = async (provider: SocialProvider, profile: SocialAuthRequest) => {
        setAuthState(prev => ({ ...prev, loading: true, error: null }));
        try {
            const response = await authApi.socialLogin(provider, profile);
            finalizeLogin(response);
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, loading: false, error: error?.message || 'Social login failed' }));
            throw error;
        }
    };

    const refreshTenants = useCallback(async () => {
        try {
            const tenants: TenantDirectoryContext = await authApi.listTenants();
            setAuthState(prev => ({
                ...prev,
                availableCompanies: tenants.companies,
                activeCompanyId: tenants.activeCompanyId,
            }));
        } catch (error) {
            console.error('Failed to refresh tenant directory', error);
        }
    }, []);

    const switchCompany = useCallback(async (companyId: string) => {
        setAuthState(prev => ({ ...prev, error: null }));
        try {
            const response: SwitchCompanyResponse = await authApi.switchCompany(companyId);
            const normalizedUser: User = {
                ...response.user,
                companyId: response.activeCompanyId,
                primaryCompanyId: response.user.primaryCompanyId ?? response.user.companyId,
            };
            setAuthState(prev => ({
                ...prev,
                user: normalizedUser,
                company: response.company,
                availableCompanies: response.availableCompanies,
                activeCompanyId: response.activeCompanyId,
            }));
        } catch (error: any) {
            setAuthState(prev => ({ ...prev, error: error?.message || 'Unable to switch company' }));
            throw error;
        }
    }, []);

    const value = {
        ...authState,
>>>>>>> efe636d (Log sixth autonomous deployment run)
        login,
        register,
        socialLogin,
        logout,
        hasPermission,
        verifyMfaAndFinalize,
        updateUserProfile,
        requestPasswordReset,
        resetPassword,
<<<<<<< HEAD
        refreshToken: refreshTokenManually,
    }), [
        authState.isAuthenticated,
        authState.token,
        authState.refreshToken,
        authState.user,
        authState.company,
        authState.loading,
        authState.error,
        login,
        register,
        socialLogin,
        logout,
        hasPermission,
        verifyMfaAndFinalize,
        updateUserProfile,
        requestPasswordReset,
        resetPassword,
        refreshTokenManually,
    ]);
=======
        refreshTenants,
        switchCompany,
    };
>>>>>>> 2500a6f (Enhance platform admin tenant access controls)

    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
