version: '3.8'

# ASAgents Platform - SQLite Production Deployment
# Simplified Docker Compose for our Express + SQLite backend

services:
  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - HOST=0.0.0.0
      - DATABASE_PATH=/app/data/database.sqlite
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    volumes:
      - ./backend/data:/app/data
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    restart: unless-stopped
    secrets:
      - jwt_secret
    networks:
      - asagents-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.production
      args:
        NODE_ENV: production
        VITE_API_URL: https://api.yourdomain.com
        VITE_WS_URL: wss://api.yourdomain.com/ws
    ports:
      - "4003:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - asagents-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - ./nginx/logs:/var/log/nginx
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - asagents-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - asagents-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    secrets:
      - grafana_password
    networks:
      - asagents-network
    profiles:
      - monitoring

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    environment:
      - BACKUP_INTERVAL=86400
      - BACKUP_RETENTION_DAYS=30
      - DATABASE_PATH=/app/data/database.sqlite
    volumes:
      - ./backend/data:/app/data:ro
      - ./backups:/app/backups
      - ./uploads:/app/uploads:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - asagents-network
    profiles:
      - backup

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

networks:
  asagents-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
